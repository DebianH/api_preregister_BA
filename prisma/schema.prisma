generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                Int               @id @default(autoincrement())
  stateRegistration stateRegistration @default(PENDING)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  nameOrganization NameOrganization?
  ruc              Ruc?
  phone            Phone?
  email            Email?
  purpose          Purpose?
  motive           Motive?
  coordinates      Coordinates?
  manipulationArea ManipulationArea?

  representative    Representative?
  dependentsBenefit DependentsBenefit?
  numPreRegister    NumPreRegister?
  address           Address?
  certificates      Certificate[]
}

model ManipulationArea {
  id               Int          @id @default(autoincrement())
  imageUrl         String
  state            Boolean
  organization     Organization @relation(fields: [manipulationArea], references: [id], onDelete: Cascade)
  manipulationArea Int          @unique
}

model NameOrganization {
  id                 Int          @id @default(autoincrement())
  text               String
  state              Boolean
  organization       Organization @relation(fields: [nameOrganizationId], references: [id], onDelete: Cascade)
  nameOrganizationId Int          @unique
}

model Ruc {
  id           Int          @id @default(autoincrement())
  text         Int
  state        Boolean
  organization Organization @relation(fields: [rucId], references: [id], onDelete: Cascade)
  rucId        Int          @unique
}

model Phone {
  id           Int          @id @default(autoincrement())
  text         String
  state        Boolean
  organization Organization @relation(fields: [phoneId], references: [id], onDelete: Cascade)
  phoneId      Int          @unique
}

model Email {
  id           Int          @id @default(autoincrement())
  text         String
  state        Boolean
  organization Organization @relation(fields: [emailId], references: [id], onDelete: Cascade)
  emailId      Int          @unique
}

model Purpose {
  id           Int          @id @default(autoincrement())
  text         String
  state        Boolean
  organization Organization @relation(fields: [purposeId], references: [id], onDelete: Cascade)
  purposeId    Int          @unique
}

model DependentsBenefit {
  id            Int           @id @default(autoincrement())
  text          Int
  state         Boolean
  beneficiaries Beneficiary[]

  organization        Organization @relation(fields: [dependentsBenefitId], references: [id], onDelete: Cascade)
  dependentsBenefitId Int          @unique
}

model Beneficiary {
  id          Int    @id @default(autoincrement())
  age         Int
  gender      String
  phoneNumber String

  dependentsBenefit   DependentsBenefit? @relation(fields: [dependentsBenefitId], references: [id], onDelete: Cascade)
  dependentsBenefitId Int?
  address             Address?           @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId           Int?
}

model Motive {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  organization Organization @relation(fields: [motiveId], references: [id], onDelete: Cascade)
  motiveId     Int          @unique
}

model NumPreRegister {
  id    Int     @id @default(autoincrement())
  text  Int
  state Boolean

  organization     Organization @relation(fields: [numPreRegisterId], references: [id], onDelete: Cascade)
  numPreRegisterId Int          @unique
}

model Certificate {
  id Int @id @default(autoincrement())

  iessCertificate IESSCertification?
  sriCertificate  SRICertification?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int          @unique
}

model IESSCertification {
  id        Int      @id @default(autoincrement())
  imageurl  String
  state     Boolean
  updatedat DateTime @updatedAt

  certificates        Certificate @relation(fields: [iessCertificationId], references: [id], onDelete: Cascade)
  iessCertificationId Int         @unique
}

model SRICertification {
  id        Int      @id @default(autoincrement())
  imageurl  String
  state     Boolean
  updatedat DateTime @updatedAt

  certificates     Certificate @relation(fields: [sriCertificateId], references: [id], onDelete: Cascade)
  sriCertificateId Int         @unique
}

model Address {
  id           Int           @id @default(autoincrement())
  city         City?
  country      Country?
  neighborhood Neighborhood?
  province     Province?
  street       Street?

  beneficiaries Beneficiary[]

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int          @unique
}

model Street {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  address  Address @relation(fields: [streetId], references: [id], onDelete: Cascade)
  streetId Int     @unique
}

model City {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  address Address @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId  Int     @unique
}

model Neighborhood {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  address        Address @relation(fields: [neighborhoodId], references: [id], onDelete: Cascade)
  neighborhoodId Int     @unique
}

model Province {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  address    Address @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  provinceId Int     @unique
}

model Country {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  address   Address @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId Int     @unique
}

model Coordinates {
  id        Int    @id @default(autoincrement())
  latitude  String
  longitude String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int          @unique
}

model Representative {
  id                  Int                  @id @default(autoincrement())
  organizationId      Int                  @unique
  emailRepresentative EmailRepresentative?
  name                Name?
  numDoc              NumDoc?
  phoneRepresentative PhoneRepresentative?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role         Role?
}

model Name {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  representative Representative @relation(fields: [nameId], references: [id], onDelete: Cascade)
  nameId         Int            @unique
}

model NumDoc {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  representative Representative @relation(fields: [numDocId], references: [id], onDelete: Cascade)
  numDocId       Int            @unique
}

model Role {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  representative Representative @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId         Int            @unique
}

model EmailRepresentative {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  representative Representative @relation(fields: [emailId], references: [id], onDelete: Cascade)
  emailId        Int            @unique
}

model PhoneRepresentative {
  id    Int     @id @default(autoincrement())
  text  String
  state Boolean

  representative Representative @relation(fields: [phoneId], references: [id], onDelete: Cascade)
  phoneId        Int            @unique
}

enum stateRegistration {
  PENDING
  REVIEW
  APPROVED
  REJECTED
}
